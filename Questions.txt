1)Заглушка метода - это прописать return? 
Определение метода интерфейса без его реализации. Сигнатура метода - название и параметры которые передаются в метод. 

2)Я вроде бы сделал задачу номер №4, и проверил через вывод на экран, вроде бы все получилось. Однако пришлось твои методы делать статическими, иначе бы не получилось их проверить. Буду вспоминать чем отличчаются статические методы от нестатических и тд. 
В задании ты написал: "нужно будет последовательно сделать две фичи (одна с заглушкой метода умножения, другая с делением)"
Но методы называются addition и substaction (Что больше походит на сложение и вычитание). Если я правильно понял смысмл слова заглушка, прописать что метод должен возвращать, то я это сделал. Но на всякий случай сделаю еще метод на умножение и вычитание, по твоему алгоритму с твоими исключениями. 

После проверки через вывод на экран static я убрал, но думаю, что это какая-то хуйня (то что я сделал).

3)Нужно ли коммитить после мерджа? И в целом как лучше действовать: довести до ума, смерджить и коммитить? Или же лучше что бы это было 2 разных коммита? 

4)Почему то на графике с ветками, не видно что делал дополнительную ветку. Надеюсь я все сделал правильно. 

5) По поводу среды разработки, вроде бы я поставил хакнутую, но что то с ней не то. Может что то не установил, хз, но если ты вдруг в курсе и сможешь потом помочь, будет супер. 

6) я попытался добавить функцию в гит, что бы в случае, если ты не вводишь сообщение, открывался обычный блокнот, но ничего не получилось. Попробую скинуть скрины на гитхаб. Если ты их тут увидишь, будет отлично, нет - разберем на занятии, если ты не против. 

Пока вроде все, если будут еще вопросы, буду добавлять. 


1) Для начала, вам не следует отправлять ненужные пробелы. Git предоставляет простой способ проверки — перед коммитом выполните команду git diff --check, которая выведет список ненужных пробелов -- Каких пробелов? В ИДЕЕ? или тут имеется в виду bash? 

2) GitFlow - это некий алгоритм работы с гитом для больших команд? Допник к гиту? 

