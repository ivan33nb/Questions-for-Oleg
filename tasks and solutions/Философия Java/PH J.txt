page 145
1t

    public static void main(String[] args){
        Test test =  new Test();
        test.test();
    }
    public static class Test{
        String s;

        public void test(){
            System.out.println(s);
        }
    }
}


2t

class Main {

    public static void main(String[] args){
        Test test =  new Test("?");
        test.test();
    }
    public static class Test{
        Test(String s1){
            System.out.println(  "Инициализируем в конструкторе" + s1);
        }
        String s = "Инициализируем в точке определения?";

        public void test(){
            System.out.println(s);
        }
    }
}

Наверное, отличия в том, что s, мы не сможем изменить при создании объекта, однако переменную s1, сможем.


p 152
t5
    public static void main(String[] args){
        Dog dog = new Dog();
        dog.bark();
        dog.bark("завывает");
        dog.bark("Гуляла", 4);
    }
    public static class Dog{
        static void bark(){
            System.out.println("Собака лаит");
        }
        static void bark(String whatDogDoing){
            System.out.println("Что делает собака? - Собака " + whatDogDoing);
        }
        static void bark(String whatDogDoing, int howMuchDogDoingIt){
            System.out.println("Собака сегодня " + whatDogDoing +" " + howMuchDogDoingIt + " раза");
        }
    }

p172 t14

Правильно? 

    public static void main(String[] args) {
        Test test = new Test("Инициализация при создании объекта");
        System.out.println(test.s);
        Test.output();

    }


    static class Test{
        static String s  = "Инициализация статического поля";
        Test(String s){
            this.s=s;
        }
        static String s2;
        static{
            s2 = "Иниициализация в статическом блоке";
        }

        static void output(){
            System.out.println(s);
            System.out.println(s2);
        }
    }

Вывод:

Инициализация при создании объекта
Инициализация при создании объекта
Иниициализация в статическом блоке

Странно, но в задании написано, что надо продимонстрировать, что статические поля инициализируются перед использованием, однако у меня как будто они инициализируются после=(

p173 t15

    public static void main(String[] args) {
        Test test = new Test("Hello1");
        System.out.println(test.s);
    }

    static class Test{
        String s;
        Test(String s){
            System.out.println(s);
        }

        {
            s = "Hello";
        }
    }


p177 t17
    public static void main(String[] args) {
        Test testArr [] = new Test[];
    }

    class Test{
        Test(String s){
            System.out.println(s);
        }
    }

Программа не запускается, так как массив не заполнен.

t18

Заполняю массив, из предыдущего упражнения. 

    public static void main(String[] args) {
        Test testArr [] = {new Test("1"), new Test("2"), new Test("3") };
    }

    static class Test{
        Test(String s){
            System.out.println(s);
        }
    }


p213 t 9

public class Main {

    public static void main(String[] args) {
        Step step = new Step();
    }
}


class Root{
    Component1 c1 = new Component1();
    Component2 c2 = new Component2();
    Component3 c3 = new Component3();
}

class Component1{
    public Component1(){
        System.out.println("Component1");
    }

}

class Component2{
    public Component2(){
        System.out.println("Component2");
    }
}

class Component3{
    public Component3(){
        System.out.println("Component3");
    }
}

class Step extends Root{

}

Все вроде бы работает

t10

public class Main {

    public static void main(String[] args) {
        Step step = new Step();
    }
}


class Root{
    Component1 c1 = new Component1(" Конструктор с аргументами добавлен");
    Component2 c2 = new Component2(" Конструктор с аргументами добавлен");
    Component3 c3 = new Component3(" Конструктор с аргументами добавлен");
}

class Component1{
    public Component1(String s){
        System.out.println("Component1" + s);
    }

}

class Component2{
    public Component2(String s){
        System.out.println("Component2" + s);
    }
}

class Component3{
    public Component3(String s){
        System.out.println("Component3" + s);
    }
}

class Step extends Root{
      public Step(){
System.out.println("Step");
}
}

Тут вроде тоже все ок.


p220t12

class Root {
    public Root() {
        System.out.println("Root");
    }

    Component1 component1 = new Component1();
    Component2 component2 = new Component2();
    Component3 component3 = new Component3();

    public void dispose() {
        component1.dispose();
        component2.dispose();
        component3.dispose();
    }
}


class Component1 {
    public Component1() {
        System.out.println("Component1");
    }

    void dispose() {
        System.out.println("Избавляемся");
    }
}

class Component2 {
    public Component2() {
        System.out.println("Component2");
    }

    void dispose() {
        System.out.println("Избавляемся");
    }
}


class Component3 {
    public Component3() {
        System.out.println("Component3");
    }

    void dispose() {
        System.out.println("Избавляемся");
    }
}

class Step extends Root {
    public Step() {
        System.out.println("Step");
    }

    public void dispose() {
        super.dispose();
    }
}


p221 t 13

public class TestClass {
    public static void main(String[] args) {
        TestClass2 testClass2 = new TestClass2();
        testClass2.m(false);
        testClass2.m(1);
        testClass2.m(1.01);
        testClass2.m("Привет");
    }
}

class TestClass3{
    public void m(String s) {
        System.out.println("m1");
    }

    public void m(int i) {
        System.out.println("m2");
    }

    public void m(double d){
        System.out.println("m3");
    }
}

class TestClass2 extends TestClass3{
    public void m(boolean b){
        System.out.println("m4");
    }
}

Только не получилось добавить @Override почему - то.


